{
  "toolName": "slot",
  "modeName": "tool",
  "subProgram": {
    "toolName": "notebook",
    "cells": [
      {
        "var_": {
          "id": "IDplay127853",
          "label": "A"
        },
        "program": {
          "toolName": "slot",
          "modeName": "tool",
          "subProgram": {
            "toolName": "file",
            "dataUrl": "data:text/html;base64,"
          },
          "defaultCode": ""
        }
      },
      {
        "var_": {
          "id": "IDseahorse909159",
          "label": "C"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "IDoutput197768.match(\"base64,(.*)$\")[1]",
          "subTools": {},
          "defaultCode": "IDoutput197768"
        }
      },
      {
        "var_": {
          "id": "IDtable897009",
          "label": "D"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "atob(IDoutput197768)",
          "subTools": {},
          "defaultCode": "IDoutput197768"
        }
      },
      {
        "var_": {
          "id": "IDquicksand586875",
          "label": "document"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "(() => {\n  let parser = new DOMParser();\n  let parsed = parser.parseFromString(IDoutput197768, 'text/html');\n  console.log(parsed);\n  return parsed;\n})()",
          "subTools": {},
          "defaultCode": "IDoutput197768"
        }
      },
      {
        "var_": {
          "id": "IDcymbal673308",
          "label": "arr"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "Array.from(IDquicksand586875.body.querySelector(\"article\").children).slice(0, 30)",
          "subTools": {},
          "defaultCode": "IDoutput197768"
        }
      },
      {
        "var_": {
          "id": "IDtrampoline922643",
          "label": "E"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "(() => {\n  let stack = [{level: 'h1', id}];\n  \n})()",
          "subTools": {},
          "defaultCode": "IDoutput197768"
        }
      },
      {
        "var_": {
          "id": "IDwineberry959342",
          "label": "B"
        },
        "program": {
          "toolName": "slot",
          "modeName": "tool",
          "subProgram": {
            "toolName": "map",
            "inputProgram": {
              "toolName": "slot",
              "modeName": "code",
              "code": "IDquicksand586875.body.querySelector(\"article\").children",
              "subTools": {},
              "defaultCode": "IDoutput197768"
            },
            "itemVar": {
              "id": "IDtransport609042",
              "label": "item"
            },
            "perItemProgram": {
              "toolName": "slot",
              "modeName": "tool",
              "subProgram": {
                "toolName": "notebook",
                "cells": [
                  {
                    "var_": {
                      "id": "IDstrand269438",
                      "label": "A"
                    },
                    "program": {
                      "toolName": "slot",
                      "modeName": "code",
                      "code": "IDtransport609042[1]",
                      "subTools": {},
                      "defaultCode": "IDtransport609042"
                    }
                  },
                  {
                    "var_": {
                      "id": "IDgasosaurus876156",
                      "label": "B"
                    },
                    "program": {
                      "toolName": "slot",
                      "modeName": "code",
                      "code": "IDash342168.outerHTML",
                      "subTools": {},
                      "defaultCode": "IDash342168"
                    }
                  }
                ],
                "prevVar": {
                  "id": "IDash342168",
                  "label": "prev"
                }
              },
              "defaultCode": "IDtransport609042"
            }
          },
          "defaultCode": "IDoutput197768"
        }
      }
    ],
    "prevVar": {
      "id": "IDoutput197768",
      "label": "prev"
    }
  },
  "defaultCode": ""
}
