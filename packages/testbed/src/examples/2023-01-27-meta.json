{
  "toolName": "slot",
  "modeName": "tool",
  "subProgram": {
    "toolName": "notebook",
    "cells": [
      {
        "var_": {
          "id": "IDwhitefish971440",
          "label": "slider program"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "Meta.sliderTool.programFactory()",
          "defaultCode": "",
          "subPrograms": {}
        },
        "outputManualHeight": "infinity"
      },
      {
        "var_": {
          "id": "IDtuba501846",
          "label": "result"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// Run the slider tool, to get an output and a view.\n\nconst mem = new IncrMemory();\nconst result = Meta.sliderTool.run(mem, {\n  program: IDwhitefish971440\n})\n\nreturn result",
          "defaultCode": "",
          "subPrograms": {}
        },
        "outputManualHeight": "infinity"
      },
      {
        "var_": {
          "id": "IDshirt883326",
          "label": "B"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// Call the view's render function.\n// We see the slider, but it's not slidable.\n\nIDtuba501846.view.render({updateProgram: () => {}})",
          "defaultCode": "IDresonance061062",
          "subPrograms": {}
        },
        "outputManualHeight": "infinity"
      },
      {
        "var_": {
          "id": "IDwinterberry362424",
          "label": "A"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// To make it slidable, we need to store the program\n// somewhere it can be modified, and pass a program\n// updater into the tool alongside the program.\n\nconst Component = () => {\n  const [program, updateProgram] = React.useState(\n    Meta.sliderTool.programFactory()\n  );\n  const mem = new IncrMemory();\n  const result = Meta.sliderTool.run(mem, {\n    program,\n  });\n  return <div>\n    {result.view.render({\n      updateProgram,\n    })}\n  </div>;\n}\n\nreturn <Component/>",
          "defaultCode": "IDresonance061062",
          "subPrograms": {}
        },
        "outputManualHeight": "infinity"
      },
      {
        "var_": {
          "id": "IDmuseum703632",
          "label": "mem"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// And just in case you're curious: Here's the Incr\n// memory backing the tool, after one run.\n\nconst program = Meta.sliderTool.programFactory()\n\nconst mem = new IncrMemory();\nconst result = Meta.sliderTool.run(mem, {\n  program\n})\n\nreturn mem",
          "defaultCode": "IDresonance061062",
          "subPrograms": {}
        },
        "outputManualHeight": "infinity"
      }
    ],
    "prevVar": {
      "id": "IDresonance061062",
      "label": "prev"
    }
  }
}
