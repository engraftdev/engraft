{
  "toolName": "slot",
  "modeName": "tool",
  "subProgram": {
    "toolName": "notebook",
    "cells": [
      {
        "var_": {
          "id": "IDcourse420341",
          "label": "square (forgetful)"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// This is a function packaged as a refunction,\n// but it doesn't do any actual remembering.\n\nRefunc.hooks((x) => {\n  log('squaring', x)\n  return x * x;\n})",
          "defaultCode": "",
          "subPrograms": {}
        }
      },
      {
        "var_": {
          "id": "IDstool314870",
          "label": "test"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// Every time we run it, we get a 'squaring' log.\n\nvar mem = new RefuncMemory();\nlog(IDcourse420341(mem, 3));\nlog(IDcourse420341(mem, 3));\nlog(IDcourse420341(mem, 4));\nlog(IDcourse420341(mem, 4));\nreturn mem;",
          "defaultCode": "IDauroraceratops452408",
          "subPrograms": {}
        }
      },
      {
        "var_": {
          "id": "IDviper061728",
          "label": "square"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// This refunction wraps the squaring work in hookMemo.\n// It will keep the result of this work around in\n// case it gets called again with the same input.\n\nRefunc.hooks((x) => {\n  const squared = Refunc.hookMemo(() => {\n    log('squaring', x)\n    return x * x;\n  }, [x]);\n  return squared;\n})",
          "defaultCode": "IDauroraceratops452408",
          "subPrograms": {}
        }
      },
      {
        "var_": {
          "id": "IDangolatitan709516",
          "label": "test"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// Now repeated calls to IDviper061728 only do the\n// squaring work once!\n\nvar mem = new RefuncMemory();\nlog(IDviper061728(mem, 3));\nlog(IDviper061728(mem, 3));\nlog(IDviper061728(mem, 4));\nlog(IDviper061728(mem, 4));\n// But note that we only remember the very\n// latest input:\nlog(IDviper061728(mem, 3));\nreturn mem;",
          "defaultCode": "IDauroraceratops452408",
          "subPrograms": {}
        },
        "outputManualHeight": "infinity"
      },
      {
        "var_": {
          "id": "IDpath451236",
          "label": "two squares"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// This refunction squares both of its arguments using\n// the previously defined IDviper061728. It uses\n// hookRefunction, which makes the memories of these\n// two calls part of the memory of the new Refunc.\n\nRefunc.hooks((x, y) => {\n  const xSquared = Refunc.hookRefunction(IDviper061728, x);\n  const ySquared = Refunc.hookRefunction(IDviper061728, y);\n  return [xSquared, ySquared];\n})",
          "defaultCode": "IDauroraceratops452408",
          "subPrograms": {}
        }
      },
      {
        "var_": {
          "id": "IDcanopy286856",
          "label": "test"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// Now each of the squarings is memoized in\n// IDviper061728's style.\n\nvar mem = new RefuncMemory();\nlog(IDpath451236(mem, 3, 4));\nlog(IDpath451236(mem, 3, 4));\nlog(IDpath451236(mem, 3, 5));\n// But note that no memory is shared between the\n// x-call and the y-call:\nlog(IDpath451236(mem, 4, 4))\nreturn mem;",
          "defaultCode": "IDauroraceratops452408",
          "subPrograms": {}
        },
        "outputManualHeight": "infinity"
      },
      {
        "var_": {
          "id": "IDbeaufort269849",
          "label": "keyed squares"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// This refunction receives an object with numeric\n// values and squares all the values. It uses\n// IDviper061728 to memoize the squaring of each value.\n// However, the number of values varies, so we\n// cannot simply call hookRefunction in a loop.\n// Instead, we use hookFork to spawn a variable\n// number of keyed branches.\n\nRefunc.hooks((nums) => {\n  const results = {};\n  Refunc.hookFork((branch) =>\n    Object.entries(nums).forEach(([key, num]) =>\n      branch(key, () => {\n        results[key] = Refunc.hookRefunction(IDviper061728, num);\n      })\n    )\n  )\n  return results;\n})",
          "defaultCode": "IDauroraceratops452408",
          "subPrograms": {}
        }
      },
      {
        "var_": {
          "id": "IDpanther618223",
          "label": "test"
        },
        "program": {
          "toolName": "slot",
          "modeName": "code",
          "code": "// It behaves like you'd expect.\n\nvar mem = new RefuncMemory();\nlog(IDbeaufort269849(mem, {a: 3      }));\nlog(IDbeaufort269849(mem, {a: 3, b: 4}));\nlog(IDbeaufort269849(mem, {a: 3, b: 4}));\nlog(IDbeaufort269849(mem, {a: 3, b: 5}));\nlog(IDbeaufort269849(mem, {      b: 5}));\nreturn mem;",
          "defaultCode": "IDauroraceratops452408",
          "subPrograms": {}
        },
        "outputManualHeight": "infinity"
      }
    ],
    "prevVarId": "IDauroraceratops452408"
  }
}
